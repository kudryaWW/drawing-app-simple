using Microsoft.AspNetCore.SignalR;

var builder = WebApplication.CreateBuilder(args);

// –î–æ–±–∞–≤–ª—è–µ–º —Å–µ—Ä–≤–∏—Å—ã
builder.Services.AddSignalR();
builder.Services.AddCors();

var app = builder.Build();

// –ò—Å–ø–æ–ª—å–∑—É–µ–º CORS
app.UseCors(policy => policy
    .AllowAnyOrigin()
    .AllowAnyMethod()
    .AllowAnyHeader());

// –†–∞–∑–¥–∞—ë–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã –∏–∑ wwwroot
app.UseDefaultFiles();
app.UseStaticFiles();

app.UseRouting();

// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º SignalR Hub
app.MapHub<DrawingHub>("/drawingHub");

// –ü—Ä–æ—Å—Ç–æ–π endpoint –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
app.MapGet("/api/health", () => new { 
    status = "OK", 
    time = DateTime.UtcNow,
    message = "Server is running"
});

// –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º —Å –∫–æ—Ä–Ω—è –Ω–∞ –Ω–∞—à—É —Å—Ç—Ä–∞–Ω–∏—Ü—É
app.MapGet("/", () => Results.Redirect("/index.html"));

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
var port = Environment.GetEnvironmentVariable("PORT") ?? "8080";
app.Run($"http://0.0.0.0:{port}");

// –£–õ–£–ß–®–ï–ù–ù–´–ô Hub —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π float
public class DrawingHub : Hub
{
    private static int _userCount = 0;
    
    // –ò–ó–ú–ï–ù–ò–õ: –ø—Ä–∏–Ω–∏–º–∞–µ–º double –≤–º–µ—Å—Ç–æ int
    public async Task SendDrawing(double startX, double startY, double endX, double endY, string color, int brushSize)
    {
        try
        {
            // –í–ê–õ–ò–î–ê–¶–ò–Ø
            if (color == null) color = "#000000";
            if (brushSize < 1) brushSize = 5;
            if (brushSize > 50) brushSize = 50;
            
            // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º double –≤ int (–æ–∫—Ä—É–≥–ª—è–µ–º)
            int startXInt = (int)Math.Round(startX);
            int startYInt = (int)Math.Round(startY);
            int endXInt = (int)Math.Round(endX);
            int endYInt = (int)Math.Round(endY);
            
            // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
            startXInt = Math.Clamp(startXInt, 0, 800);
            startYInt = Math.Clamp(startYInt, 0, 500);
            endXInt = Math.Clamp(endXInt, 0, 800);
            endYInt = Math.Clamp(endYInt, 0, 500);
            
            Console.WriteLine($"üé® RECEIVED: {startX:F2},{startY:F2} -> {endX:F2},{endY:F2} (converted to: {startXInt},{startYInt} -> {endXInt},{endYInt})");
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º –∫—Ä–æ–º–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
            await Clients.Others.SendAsync("ReceiveDrawing", startXInt, startYInt, endXInt, endYInt, color, brushSize);
            
            Console.WriteLine($"‚úÖ SENT to others: {startXInt},{startYInt} -> {endXInt},{endYInt}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"‚ùå ERROR in SendDrawing: {ex.Message}");
            Console.WriteLine($"‚ùå Data: {startX},{startY} -> {endX},{endY} color:{color} size:{brushSize}");
        }
    }
    
    public async Task ClearCanvas()
    {
        Console.WriteLine("üßπ Clear canvas requested");
        await Clients.All.SendAsync("CanvasCleared");
    }
    
    public override async Task OnConnectedAsync()
    {
        _userCount++;
        Console.WriteLine($"üîó CONNECTED: {Context.ConnectionId}. Total: {_userCount}");
        await Clients.All.SendAsync("UserCountUpdated", _userCount);
        await base.OnConnectedAsync();
    }
    
    public override async Task OnDisconnectedAsync(Exception? exception)
    {
        _userCount--;
        Console.WriteLine($"üîå DISCONNECTED: {Context.ConnectionId}. Total: {_userCount}");
        await Clients.All.SendAsync("UserCountUpdated", _userCount);
        await base.OnDisconnectedAsync(exception);
    }
}
