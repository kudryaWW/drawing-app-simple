using Microsoft.AspNetCore.SignalR;
using Microsoft.AspNetCore.Cors;

var builder = WebApplication.CreateBuilder(args);

// –î–æ–±–∞–≤–ª—è–µ–º —Å–µ—Ä–≤–∏—Å—ã
builder.Services.AddSignalR();
builder.Services.AddCors(options =>
{
    options.AddPolicy("AllowAll", policy =>
    {
        policy.AllowAnyOrigin()
              .AllowAnyMethod()
              .AllowAnyHeader();
    });
});

var app = builder.Build();

// –ò—Å–ø–æ–ª—å–∑—É–µ–º CORS
app.UseCors("AllowAll");

// –†–∞–∑–¥–∞—ë–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã –∏–∑ wwwroot
app.UseDefaultFiles();
app.UseStaticFiles();

app.UseRouting();

// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º SignalR Hub
app.MapHub<DrawingHub>("/drawingHub");

// –ü—Ä–æ—Å—Ç–æ–π endpoint –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
app.MapGet("/api/health", () => new { status = "OK", time = DateTime.UtcNow });

// –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º —Å –∫–æ—Ä–Ω—è –Ω–∞ –Ω–∞—à—É —Å—Ç—Ä–∞–Ω–∏—Ü—É
app.MapGet("/", () => "Drawing App is running! Go to /index.html");

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
var port = Environment.GetEnvironmentVariable("PORT") ?? "8080";
app.Run($"http://0.0.0.0:{port}");

// Hub –¥–ª—è —Ä–∏—Å–æ–≤–∞–Ω–∏—è
public class DrawingHub : Hub
{
    private static int _userCount = 0;
    
    public async Task SendDrawing(int startX, int startY, int endX, int endY, string color, int brushSize)
    {
        try
        {
            // –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            if (string.IsNullOrEmpty(color))
                color = "#000000";
                
            if (brushSize <= 0)
                brushSize = 5;
                
            if (brushSize > 100)
                brushSize = 100;

            // –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            Console.WriteLine($"üé® –ü–æ–ª—É—á–µ–Ω —Ä–∏—Å—É–Ω–æ–∫: {startX},{startY} -> {endX},{endY} —Ü–≤–µ—Ç: {color} —Ä–∞–∑–º–µ—Ä: {brushSize}");
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º –∫—Ä–æ–º–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
            await Clients.Others.SendAsync("ReceiveDrawing", startX, startY, endX, endY, color, brushSize);
            
            Console.WriteLine("‚úÖ –†–∏—Å—É–Ω–æ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –¥—Ä—É–≥–∏–º –∫–ª–∏–µ–Ω—Ç–∞–º");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"‚ùå –û—à–∏–±–∫–∞ –≤ SendDrawing: {ex.Message}");
            Console.WriteLine($"‚ùå StackTrace: {ex.StackTrace}");
            // –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –æ–±—Ä–∞—Ç–Ω–æ –∫–ª–∏–µ–Ω—Ç—É
            throw;
        }
    }
    
    public async Task ClearCanvas()
    {
        Console.WriteLine("üßπ –û—á–∏—Å—Ç–∫–∞ —Ö–æ–ª—Å—Ç–∞");
        await Clients.All.SendAsync("CanvasCleared");
    }
    
    // –ü—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    public override async Task OnConnectedAsync()
    {
        _userCount++;
        Console.WriteLine($"üîó –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è. –í—Å–µ–≥–æ: {_userCount}, ConnectionId: {Context.ConnectionId}");
        
        await Clients.All.SendAsync("UserCountUpdated", _userCount);
        await base.OnConnectedAsync();
    }
    
    // –ü—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    public override async Task OnDisconnectedAsync(Exception? exception)
    {
        _userCount--;
        Console.WriteLine($"üîå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–ª—é—á–∏–ª—Å—è. –í—Å–µ–≥–æ: {_userCount}, ConnectionId: {Context.ConnectionId}");
        
        await Clients.All.SendAsync("UserCountUpdated", _userCount);
        await base.OnDisconnectedAsync(exception);
    }
}
