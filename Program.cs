using Microsoft.AspNetCore.SignalR;

var builder = WebApplication.CreateBuilder(args);

// –î–æ–±–∞–≤–ª—è–µ–º —Å–µ—Ä–≤–∏—Å—ã
builder.Services.AddSignalR();
builder.Services.AddCors();

var app = builder.Build();

// –ò—Å–ø–æ–ª—å–∑—É–µ–º CORS
app.UseCors(policy => policy
    .AllowAnyOrigin()
    .AllowAnyMethod()
    .AllowAnyHeader());

// –†–∞–∑–¥–∞—ë–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã –∏–∑ wwwroot
app.UseDefaultFiles();
app.UseStaticFiles();

app.UseRouting();

// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º SignalR Hub
app.MapHub<DrawingHub>("/drawingHub");

// –ü—Ä–æ—Å—Ç–æ–π endpoint –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
app.MapGet("/api/health", () => new { 
    status = "OK", 
    time = DateTime.UtcNow,
    message = "Server is running",
    port = Environment.GetEnvironmentVariable("PORT")
});

// –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º —Å –∫–æ—Ä–Ω—è –Ω–∞ –Ω–∞—à—É —Å—Ç—Ä–∞–Ω–∏—Ü—É
app.MapGet("/", () => Results.Redirect("/index.html"));

// –ó–ê–ü–£–°–ö –ù–ê –ü–†–ê–í–ò–õ–¨–ù–û–ú –ü–û–†–¢–£
var port = Environment.GetEnvironmentVariable("PORT") ?? "8080";
app.Run($"http://0.0.0.0:{port}");

// –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø—Ä–æ—Å—Ç–æ–π Hub
public class DrawingHub : Hub
{
    private static int _userCount = 0;
    
    public async Task SendDrawing(int startX, int startY, int endX, int endY, string color, int brushSize)
    {
        Console.WriteLine($"üì± Received from {Context.ConnectionId}: {startX},{startY} -> {endX},{endY}");
        await Clients.Others.SendAsync("ReceiveDrawing", startX, startY, endX, endY, color, brushSize);
    }
    
    public async Task ClearCanvas()
    {
        Console.WriteLine("üßπ Clear canvas");
        await Clients.All.SendAsync("CanvasCleared");
    }
    
    public override async Task OnConnectedAsync()
    {
        _userCount++;
        Console.WriteLine($"üîó CONNECTED: {Context.ConnectionId}. Total: {_userCount}");
        await Clients.All.SendAsync("UserCountUpdated", _userCount);
        await base.OnConnectedAsync();
    }
    
    public override async Task OnDisconnectedAsync(Exception? exception)
    {
        _userCount--;
        Console.WriteLine($"üîå DISCONNECTED: {Context.ConnectionId}. Total: {_userCount}");
        await Clients.All.SendAsync("UserCountUpdated", _userCount);
        await base.OnDisconnectedAsync(exception);
    }
}
